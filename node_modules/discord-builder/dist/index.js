#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = void 0;
const prompts_1 = __importDefault(require("prompts"));
const questions_1 = __importStar(require("./constants/questions"));
const chalk_1 = __importDefault(require("chalk"));
const boxen_1 = __importDefault(require("boxen"));
const clone_1 = __importDefault(require("./utils/clone"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const listr_1 = __importDefault(require("listr"));
const execa_1 = __importDefault(require("execa"));
const packages_1 = __importDefault(require("./constants/packages"));
function cli(args) {
    (0, prompts_1.default)(questions_1.default.PromptQuestions).then((answers) => __awaiter(this, void 0, void 0, function* () {
        let success = [];
        for (var [key, value] of Object.entries(questions_1.Answers)) {
            if (questions_1.Answers[key].required) {
                if (!answers[key]) {
                    console.log(chalk_1.default.redBright((0, boxen_1.default)(`[-] Argument: ${key} is missing or invalid`, { title: chalk_1.default.yellowBright(`Missing Arguments`), titleAlignment: 'center' })));
                    process.exit(1);
                }
                if (questions_1.Answers[key].values) {
                    if (questions_1.Answers[key].values.includes(answers[key])) {
                        success.push(true);
                    }
                }
                else {
                    success.push(true);
                }
            }
        }
        if (success.filter(e => e == true).length >= Object.values(answers).length) {
            const { language, directory, token, loader } = answers;
            let basename = path_1.default.basename(directory);
            if (!fs_1.default.existsSync(path_1.default.join(directory))) {
                fs_1.default.mkdirSync(directory);
            }
            const cloner = new clone_1.default({
                language,
                directory,
                token,
                loader
            });
            yield cloner.Clone(path_1.default.basename(directory), path_1.default.join(__dirname, "Cloneables", language), directory);
            const tasks = new listr_1.default([
                {
                    title: "initialising npm",
                    task: () => __awaiter(this, void 0, void 0, function* () {
                        yield (0, execa_1.default)("npm", ["init", "-y"], {
                            cwd: directory,
                        });
                    })
                },
                {
                    title: "installing packages",
                    task: () => __awaiter(this, void 0, void 0, function* () {
                        yield (0, execa_1.default)("npm", packages_1.default, {
                            cwd: directory,
                        });
                    })
                },
                {
                    title: "initialising tsc",
                    task: () => __awaiter(this, void 0, void 0, function* () {
                        if (fs_1.default.existsSync(path_1.default.join(directory, "tsconfig.json")))
                            return;
                        yield (0, execa_1.default)("tsc", ["--init"], {
                            cwd: directory,
                        });
                    }),
                    enabled: () => {
                        return language == "ts" && !fs_1.default.existsSync(path_1.default.join(directory, "tsconfig.json")) ? true : false;
                    }
                }
            ]);
            yield tasks.run();
            console.log('%s Project ready', chalk_1.default.green.bold('DONE'));
        }
    }));
}
exports.cli = cli;
exports.cli(process.argv);
