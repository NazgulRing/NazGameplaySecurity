"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const replaceables_1 = __importDefault(require("../constants/replaceables"));
class Cloner {
    constructor(values) {
        this.values = values;
        this.clonedir = path_1.default.join(__dirname, "..", "Cloneables", this.values.language);
    }
    Clone(base, clonedir, directory) {
        return __awaiter(this, void 0, void 0, function* () {
            let clone = clonedir !== null && clonedir !== void 0 ? clonedir : this.clonedir;
            let files = fs_1.default.readdirSync(clone);
            if (!files || files.length < 1)
                return;
            for (var file of files) {
                if (!fs_1.default.lstatSync(path_1.default.join(clone, file)).isDirectory()) {
                    let content = fs_1.default.readFileSync(path_1.default.join(clone, file), { encoding: "utf-8" });
                    for (var [key, value] of Object.entries(replaceables_1.default)) {
                        content = content.replace(key, this.values[value]);
                    }
                    fs_1.default.writeFileSync(path_1.default.join(directory, file), content, { encoding: "utf-8" });
                }
                else {
                    fs_1.default.mkdirSync(path_1.default.join(directory, file));
                    this.Clone(base, path_1.default.join(clone, file), path_1.default.join(directory, file));
                }
            }
        });
    }
}
exports.default = Cloner;
